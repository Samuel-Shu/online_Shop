// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: llms.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Llms_UploadFile_FullMethodName  = "/llms/UploadFile"
	Llms_SendMessage_FullMethodName = "/llms/SendMessage"
	Llms_HealthCheck_FullMethodName = "/llms/HealthCheck"
)

// LlmsClient is the client API for Llms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LlmsClient interface {
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	SendMessage(ctx context.Context, in *ChatMessageRequest, opts ...grpc.CallOption) (*ChatMessageResponse, error)
	HealthCheck(ctx context.Context, in *EmptyWithLlms, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type llmsClient struct {
	cc grpc.ClientConnInterface
}

func NewLlmsClient(cc grpc.ClientConnInterface) LlmsClient {
	return &llmsClient{cc}
}

func (c *llmsClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, Llms_UploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *llmsClient) SendMessage(ctx context.Context, in *ChatMessageRequest, opts ...grpc.CallOption) (*ChatMessageResponse, error) {
	out := new(ChatMessageResponse)
	err := c.cc.Invoke(ctx, Llms_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *llmsClient) HealthCheck(ctx context.Context, in *EmptyWithLlms, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, Llms_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LlmsServer is the server API for Llms service.
// All implementations must embed UnimplementedLlmsServer
// for forward compatibility
type LlmsServer interface {
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	SendMessage(context.Context, *ChatMessageRequest) (*ChatMessageResponse, error)
	HealthCheck(context.Context, *EmptyWithLlms) (*HealthCheckResponse, error)
	mustEmbedUnimplementedLlmsServer()
}

// UnimplementedLlmsServer must be embedded to have forward compatible implementations.
type UnimplementedLlmsServer struct {
}

func (UnimplementedLlmsServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedLlmsServer) SendMessage(context.Context, *ChatMessageRequest) (*ChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedLlmsServer) HealthCheck(context.Context, *EmptyWithLlms) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedLlmsServer) mustEmbedUnimplementedLlmsServer() {}

// UnsafeLlmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LlmsServer will
// result in compilation errors.
type UnsafeLlmsServer interface {
	mustEmbedUnimplementedLlmsServer()
}

func RegisterLlmsServer(s grpc.ServiceRegistrar, srv LlmsServer) {
	s.RegisterService(&Llms_ServiceDesc, srv)
}

func _Llms_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LlmsServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Llms_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LlmsServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Llms_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LlmsServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Llms_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LlmsServer).SendMessage(ctx, req.(*ChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Llms_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyWithLlms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LlmsServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Llms_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LlmsServer).HealthCheck(ctx, req.(*EmptyWithLlms))
	}
	return interceptor(ctx, in, info, handler)
}

// Llms_ServiceDesc is the grpc.ServiceDesc for Llms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Llms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llms",
	HandlerType: (*LlmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _Llms_UploadFile_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Llms_SendMessage_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _Llms_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "llms.proto",
}
